<!DOCTYPE html>
<html lang="<%= global.config['lang'] %>">
	<head prefix="og: http://ogp.me/ns#">
		<%- include('./header', {title: global.translator('build.title')}) %>

		<script src="/ace/ace.js"></script>
		<script src="/blockly/blockly_compressed.js"></script>
		<script src="/blockly/blocks_compressed.js"></script>
		<script src="/blockly/javascript_compressed.js"></script>
		<script src="/blockly/msg/js/<%= global.config.lang %>.js"></script>
		<script src="/resources/js/jquery.validate.min.js"></script>
		<script>
			$.validator.setDefaults({
				errorClass: 'invalid',
				validClass: "valid",

				errorPlacement: function (error, element){
					$(element)
						.closest("form")
						.find("label[for='" + element.attr("id") + "']")
						.text(error.text());
				}
			});

			$.validator.addMethod("regex", function(value, element){
				return (/^[A-Za-z0-9가-힣ㄱ-ㅎ-+_() ]{3,20}$/).test(value);
			}, "<%= global.translator('validate.regex') %>");

			var modalHeader = undefined;
			var modalContent = undefined;
			var type = undefined;

			$(document).ready(function(){
				$('ul.tabs').tabs();
				$('select').material_select();
				$('form').validate({
					rules: {
						name: {
							required : true,
							minlength: 3,
							regex: true
						}
					},

					messages : {
						name: {
							required: '<%= global.translator('validate.required') %>',
							minlength: '<%= global.translator('validate.minlength') %>',
						}
					}
				});

				modalHeader = $('#api-modal-header');
				modalContent = $('#api-modal-content');
				type = $('#type');

				$('.modal-trigger').leanModal();
			});

			function openAPI(){
				$.ajax('/api/' + type.val()).done(function(apiData){
					modalHeader.empty().html(apiData.title);
					modalContent.empty();

					(apiData.content || []).forEach(function(v){
						modalContent
							.append($(document.createElement('h4')).html(v.title))
							.append($(document.createElement('p4')).html(v.content));
					});
				});
			}

			<% blockly.forEach((category) => { %>
				<% category.content.forEach((v) => { %>
					Blockly.Blocks['<%- category.name %>_<%- v.conv %>'] = {
						init: function(){
							this.jsonInit(
								<%- JSON.stringify(v) %>
							);
						}
					};
					
					Blockly.JavaScript['<%- category.name %>_<%- v.conv %>'] = function(block) {
						<% if(v.convManual !== undefined){ %>
							return '<%- v.conv %>(' + (Blockly.JavaScript.valueToCode(block, 'VALUE', Blockly.JavaScript.ORDER_NONE) || '') + ');\n';
						<% }else{ %>
							<%- v.convManual %>
						<% } %>
					};
				<% }); %>
			<% }); %>
		</script>

		<style>
			#code-editor * {
				font-family: 'NanumCoding' !important;
			}

			.blocklyWidgetDiv, .blocklyTooltipDiv, .blocklyToolboxDiv {
				z-index: 999;
			}
		</style>

		<xml id="blockly-toolbox" style="display: none">
			<category name="Logic">
				<category name="If">
					<block type="controls_if"></block>
					<block type="controls_if">
						<mutation else="1"></mutation>
					</block>
					<block type="controls_if">
						<mutation elseif="1" else="1"></mutation>
					</block>
				</category>
				<category name="Boolean">
					<block type="logic_compare"></block>
					<block type="logic_operation"></block>
					<block type="logic_negate"></block>
					<block type="logic_boolean"></block>
					<block type="logic_null"></block>
					<block type="logic_ternary"></block>
				</category>
			</category>
			<category name="Loops">
				<block type="controls_repeat_ext">
					<value name="TIMES">
						<block type="math_number">
							<field name="NUM">10</field>
						</block>
					</value>
				</block>
				<block type="controls_whileUntil"></block>
				<block type="controls_for">
					<field name="VAR">i</field>
					<value name="FROM">
						<block type="math_number">
							<field name="NUM">1</field>
						</block>
					</value>
					<value name="TO">
						<block type="math_number">
							<field name="NUM">10</field>
						</block>
					</value>
					<value name="BY">
						<block type="math_number">
							<field name="NUM">1</field>
						</block>
					</value>
				</block>
				<block type="controls_forEach"></block>
				<block type="controls_flow_statements"></block>
			</category>
			<category name="Math">
				<block type="math_number"></block>
				<block type="math_arithmetic"></block>
				<block type="math_single"></block>
				<block type="math_trig"></block>
				<block type="math_constant"></block>
				<block type="math_number_property"></block>
				<block type="math_change">
					<value name="DELTA">
						<block type="math_number">
							<field name="NUM">1</field>
						</block>
					</value>
				</block>
				<block type="math_round"></block>
				<block type="math_on_list"></block>
				<block type="math_modulo"></block>
				<block type="math_constrain">
					<value name="LOW">
						<block type="math_number">
							<field name="NUM">1</field>
						</block>
					</value>
					<value name="HIGH">
						<block type="math_number">
							<field name="NUM">100</field>
						</block>
					</value>
				</block>
				<block type="math_random_int">
					<value name="FROM">
						<block type="math_number">
							<field name="NUM">1</field>
						</block>
					</value>
					<value name="TO">
						<block type="math_number">
							<field name="NUM">100</field>
						</block>
					</value>
				</block>
				<block type="math_random_float"></block>
			</category>
			<category colour="160" name="Text">
				<block type="text"></block>
				<block type="text_join"></block>
				<block type="text_append">
					<value name="TEXT">
						<shadow type="text"></shadow>
					</value>
				</block>
				<block type="text_length">
					<value name="VALUE">
						<shadow type="text">
							<field name="TEXT">abc</field>
						</shadow>
					</value>
				</block>
				<block type="text_isEmpty">
					<value name="VALUE">
						<shadow type="text">
							<field name="TEXT"></field>
						</shadow>
					</value>
				</block>
				<block type="text_indexOf">
					<value name="VALUE">
						<block type="variables_get">
							<field name="VAR">text</field>
						</block>
					</value>
					<value name="FIND">
						<shadow type="text">
							<field name="TEXT">abc</field>
						</shadow>
					</value>
				</block>
				<block type="text_charAt">
					<value name="VALUE">
						<block type="variables_get">
							<field name="VAR">text</field>
						</block>
					</value>
				</block>
				<block type="text_getSubstring">
					<value name="STRING">
						<block type="variables_get">
							<field name="VAR">text</field>
						</block>
					</value>
				</block>
				<block type="text_changeCase">
					<value name="TEXT">
						<shadow type="text">
							<field name="TEXT">abc</field>
						</shadow>
					</value>
				</block>
				<block type="text_trim">
					<value name="TEXT">
						<shadow type="text">
							<field name="TEXT">abc</field>
						</shadow>
					</value>
				</block>
			</category>
			<category name="Lists">
				<block type="lists_create_empty"></block>
				<block type="lists_create_with"></block>
				<block type="lists_repeat">
					<value name="NUM">
						<block type="math_number">
							<field name="NUM">5</field>
						</block>
					</value>
				</block>
				<block type="lists_length"></block>
				<block type="lists_isEmpty"></block>
				<block type="lists_indexOf"></block>
				<block type="lists_getIndex"></block>
				<block type="lists_setIndex"></block>
			</category>
			<category name="Variables" custom="VARIABLE"></category>
			<category name="Functions" custom="PROCEDURE"></category>
			<sep></sep>
			<% blockly.forEach((v) => { %>
				<category name="<%- v.name %>">
					<% v.content.forEach((v1) => { %>
						<block type="<%- v.name %>_<%- v1.conv %>"></block>
					<% }); %>
				</category>
			<% }); %>
		</xml>
	</head>

	<body>
		<% include ./navigation %>
		<% include ./background %>

		<section class="main-section">
			<form method="post">
				<% if(typeof token !== 'undefined'){ %>
					<input name="token" type="hidden" value="<%- token %>">
				<% } %>

				<div class="row">
					<div class="input-field col s12">
						<label for="name"><%= global.translator('build.name') %></label>
						<input id="name" name="name" type="text">
					</div>
				</div>

				<div class="row">
					<div class="input-field col s12">
						<label for="skin"><%= global.translator('build.skin') %></label>
						<select id="skin" name="skin">
							<% skin.forEach((v) => { %>
								<option value="<%= v %>" data-icon="/resources/image/skins/<%= v %>.svg" class="left">
									<%= global.translator('shop.item.skins.' + v) %>
								</option>
							<% }); %>
						</select>
					</div>
				</div>

				<div class="row">
					<div class="input-field col s12">
						<label for="type"><%= global.translator('build.game') %></label>
						<select id="type" name="type">
							<% Object.keys(games).forEach((k) => {
								var v = games[k];
								if(v.getOptions()['show_to_bot_type']){ %>
									<option value="<%= v.getName() %>">
										<%= v.getReadableName() %>
									</option>
								<% } %>
							<% }); %>
						</select>
					</div>
				</div>

				<div class="row">
					<h3><%= global.translator('build.edit') %></h3>
					<a class="btn waves-effect waves-light modal-trigger" href="#api-modal" onclick="openAPI()">
						<%= global.translator('build.api') %>
					</a>
					<div class="row">
						<p class="warn">
							<%= global.translator('build.editor.do.not.both') %>
						</p>
						<div class="col s12">
							<ul class="tabs">
								<li class="tab col s3"><a class="active" href="#code"><%= global.translator('build.editor.code') %></a></li>
								<li class="tab col s3"><a href="#blockly"><%= global.translator('build.editor.blockly') %></a></li>
							</ul>
						</div>

						<div id="code" class="col s12">
							<div id="code-editor"></div>
						</div>

						<div id="blockly" class="col s12" style="width: 800px; height: 600px;">
							<div id="blockly-div" style="width: 800px; height: 600px; position: absolute; z-index: 999"></div>
						</div>
					</div>
				</div>

				<textarea id="code" name="code" style="display: none"></textarea>

				<button class="btn waves-effect waves-light" type="submit"><%= global.translator('build.create') %></button>
			</form>

			<% if(typeof bot !== 'undefined'){ %>
				<div id="bot-code" style="display: none">
					<%- bot.code %>
				</div>
			<% } %>

			<script>
				var codeArea = $('#code');
				var editor = ace.edit('code-editor');
				editor.setTheme('ace/theme/monokai');
				editor.getSession().setMode('ace/mode/javascript');
				editor.setAutoScrollEditorIntoView(true);
				editor.setOption("maxLines", 100);
				editor.setOption("minLines", 30);
				editor.getSession().on('change', function(){
					codeArea.val(editor.getSession().getValue());
				});
				editor.setValue('', -1);

				<% if(typeof bot !== 'undefined'){ %>
					$('#name').val('<%= bot.name %>');
					$('#skin').val('<%= bot.skin %>');
					$('#type').val('<%= bot.type %>');

					editor.setValue($('#bot-code').html(), -1);
				<% } %>

				var workspace = Blockly.inject('blockly-div', {toolbox: $('#blockly-toolbox').get(0)});

				var blocklySvg = $('.blocklySvg');
				var blocklyThings = $('.blocklyWidgetDiv, .blocklyTooltipDiv, .blocklyToolboxDiv');

				$('ul.tabs a[href=#code]').click(function(){
					blocklyThings.css({
						display: 'none'
					});
				});

				$('ul.tabs a[href=#blockly]').click(function(){
					blocklySvg.attr('width', '800px').attr('height', '600px');
					blocklyThings.css({
						display: 'block'
					});
				});

				workspace.addChangeListener(function(){
					editor.setValue(Blockly.JavaScript.workspaceToCode(workspace), -1);
				});

			</script>
		</section>

		<% include ./footer %>

		<div id="api-modal" class="modal bottom-sheet">
			<div class="modal-content">
				<h3 id="api-modal-header"></h3>
				<p id="api-modal-content"></p>
			</div>
		</div>
	</body>
</html>

<%#
	#TODO:20 Add bot testing
%>
