<!DOCTYPE html>
<html lang="<%= global.config['lang'] %>">
	<head prefix="og: http://ogp.me/ns#">
		<script>
			var test = [];
			function printLog(str){
				log.prepend($(document.createElement('textarea')).val(str).attr('disabled', ''));
			}
		</script>

		<% include ./battle-script-pre %>
		<%- include('./header', {title: global.translator('build.title')}) %>

		<script src="/ace/ace.js"></script>
		<script src="/blockly/blockly_compressed.js"></script>
		<script src="/blockly/blocks_compressed.js"></script>
		<script src="/blockly/javascript_compressed.js"></script>
		<script src="/blockly/msg/js/<%= global.config.lang %>.js"></script>
		<script src="/resources/js/jquery.validate.min.js"></script>
		<script>
			$.validator.setDefaults({
				errorClass: 'invalid',
				validClass: "valid",

				errorPlacement: function (error, element){
					$(element)
						.closest("form")
						.find("label[for='" + element.attr("id") + "']")
						.text(error.text());
				}
			});

			$.validator.addMethod("regex", function(value, element){
				return (/^[A-Za-z0-9가-힣ㄱ-ㅎ-+_() ]{3,20}$/).test(value);
			}, "<%= global.translator('validate.regex') %>");

			var modalHeader = undefined;
			var modalContent = undefined;
			var type = undefined;
			var changed = false;
			var submitted = false;

			$(document).ready(function(){
				$('ul.tabs').tabs();
				$('select').material_select();
				$('form').validate({
					rules: {
						name: {
							required : true,
							minlength: 3,
							regex: true
						}
					},

					messages : {
						name: {
							required: '<%= global.translator('validate.required') %>',
							minlength: '<%= global.translator('validate.minlength') %>',
						}
					}
				});

				modalHeader = $('#api-modal-header');
				modalContent = $('#api-modal-content');
				type = $('#type');

				$('.modal-trigger').leanModal();

				$('#code-form').on('submit', function(){
					submitted = true;
				});

				$('#code-form input, #code-form textarea').on('change', function(){
					changed = true;
				});
			});

			function openAPI(){
				$.ajax('/api/' + type.val()).done(function(apiData){
					modalHeader.empty().html(apiData.title);
					modalContent.empty();

					(apiData.content || []).forEach(function(v){
						modalContent
							.append($(document.createElement('h4')).html(v.title))
							.append($(document.createElement('p4')).html(v.content));
					});
				});
			}

			window.onbeforeunload = function(e){
				if(changed && !submitted){
					e = e || window.event;

					if(e){
						e.returnValue = '<%= global.translator('build.unload') %>';
					}

					return '<%= global.translator('build.unload') %>';
				}
			};
		</script>

		<style>
			#code-editor * {
				font-family: 'NanumCoding' !important;
			}

			.blocklyWidgetDiv, .blocklyTooltipDiv, .blocklyToolboxDiv {
				z-index: 999;
			}

			.warn {
				font-size: 1.5rem;
				font-weight: bold;
				color: crimson;
			}

			#log-wrapper {
				overflow-y: auto;
			}

			#log-wrapper textarea {
				color: #fff !important;
			}
		</style>

		<% include ./blockly %>
	</head>

	<body>
		<% include ./navigation %>
		<% include ./background %>

		<section class="main-section">
			<form method="post" id="code-form">
				<% if(typeof token !== 'undefined'){ %>
					<input name="token" type="hidden" value="<%- token %>">
				<% } %>

				<div class="row">
					<div class="input-field col s12">
						<label for="name"><%= global.translator('build.name') %></label>
						<input id="name" name="name" type="text">
					</div>
				</div>

				<div class="row">
					<div class="input-field col s12">
						<label for="skin"><%= global.translator('build.skin') %></label>
						<select id="skin" name="skin">
							<% skin.forEach((v) => { %>
								<option value="<%= v %>" data-icon="/resources/image/skins/<%= v %>.svg" class="left">
									<%= global.translator('shop.item.skins.' + v) %>
								</option>
							<% }); %>
						</select>
					</div>
				</div>

				<div class="row">
					<div class="input-field col s12">
						<label for="type"><%= global.translator('build.game') %></label>
						<select id="type" name="type">
							<% Object.keys(games).forEach((k) => {
								var v = games[k];
								if(v.getOptions()['show_to_bot_type']){ %>
									<option value="<%= v.getName() %>">
										<%= v.getReadableName() %>
									</option>
								<% } %>
							<% }); %>
						</select>
					</div>
				</div>

				<div class="row">
					<h3><%= global.translator('build.edit') %></h3>
					<a class="btn waves-effect waves-light modal-trigger" href="#api-modal" onclick="openAPI()">
						<%= global.translator('build.api') %>
					</a>
					<div class="row">
						<p class="warn">
							<%- global.translator('build.editor.do.not.both') %>
						</p>
						<div class="col s12">
							<ul class="tabs">
								<li class="tab col s3"><a class="active" href="#codeView"><%= global.translator('build.editor.code') %></a></li>
								<li class="tab col s3"><a href="#blockly"><%= global.translator('build.editor.blockly') %></a></li>
								<li class="tab col s3"><a href="#testView"><%= global.translator('build.editor.test') %></a></li>
							</ul>
						</div>

						<div id="codeView" class="col s12">
							<div id="code-editor"></div>
						</div>

						<div id="blockly" class="col s12" style="width: 800px; height: 650px;">
							<button class="btn waves-effect waves-light" onclick="exportToXml(); return false;"><%= global.translator('build.blockly.export') %></button>
							<button class="btn waves-effect waves-light" onclick="importFromXml(); return false;"><%= global.translator('build.blockly.import') %></button>
							<span><%= global.translator('build.blockly.click') %></span>
							<div id="blockly-div" style="width: 800px; height: 600px; position: absolute; z-index: 999"></div>
						</div>

						<div id="testView" class="col s12">
							<button class="btn waves-effect waves-light" onclick="testBot(); return false;"><%= global.translator('build.editor.test.start') %></button>
							<span class="warn"><%= global.translator('build.editor.test.save') %></span>
							<canvas style="display: block; width: 100%; height: 600px;" id="main-canvas"></canvas>
							<div style="display: block; background: <%= global.theme['background-0'] %>; width: 100%; height: 300px" id="log-wrapper"></div>
						</div>
					</div>
				</div>

				<textarea id="code" name="code" style="display: none"></textarea>
				<p>
					<input type="checkbox" id="playable" name="playable" checked="false"/>
					<label for="playable"><%= global.translator('build.playable') %></label>
				</p>
				<button class="btn waves-effect waves-light" type="submit"><%= global.translator('build.create') %></button>
			</form>

			<% if(typeof bot !== 'undefined'){ %>
				<div id="bot-code" style="display: none"><%= bot.code %></div>
			<% } %>

			<script>
				var codeArea = $('#code');
				var editor = ace.edit('code-editor');
				editor.setTheme('ace/theme/monokai');
				editor.getSession().setMode('ace/mode/javascript');
				editor.setAutoScrollEditorIntoView(true);
				editor.setOption("maxLines", 100);
				editor.setOption("minLines", 30);
				editor.setValue('', -1);
				<% if(typeof bot !== 'undefined'){ %>
					$('#name').val('<%= bot.name %>');
					$('#skin').val('<%= bot.skin %>');
					$('#type').val('<%= bot.type %>');
					$('#playable').checked = <%= bot.playable %>;

					editor.setValue($('#bot-code').text(), -1);
					codeArea.val(editor.getSession().getValue());
				<% } %>

				editor.getSession().on('change', function(){
					codeArea.val(editor.getSession().getValue());
					changed = true;
				});

				var workspace = Blockly.inject('blockly-div', {toolbox: $('#blockly-toolbox').get(0)});

				var blocklySvg = $('.blocklySvg');
				var blocklyThings = $('.blocklyWidgetDiv, .blocklyTooltipDiv, .blocklyToolboxDiv');

				$('ul.tabs a:not([href=#blockly])').click(function(){
					blocklyThings.css({
						display: 'none'
					});
				});

				$('ul.tabs a[href=#blockly]').click(function(){
					blocklySvg.attr('width', '800px').attr('height', '600px');
					blocklyThings.css({
						display: 'block'
					});
				});

				workspace.addChangeListener(function(){
					var code = Blockly.JavaScript.workspaceToCode(workspace);
					editor.setValue(code, -1);
					codeArea.val(code);
					changed = true;
				});

				function storageAvailable(type) {
					try {
						var storage = window[type],
							x = '__storage_test__';
						storage.setItem(x, x);
						storage.removeItem(x);
						return true;
					}
					catch(e) {
						return false;
					}
				}

				function exportToXml(){
					if(!storageAvailable('localStorage')){
						alert('<%- global.translator('storage.unavailable') %>');
					}

					window.localStorage.setItem('blocklyxml', Blockly.Xml.domToText(Blockly.Xml.workspaceToDom(workspace)));
				}

				function importFromXml(){
					if(!storageAvailable('localStorage')){
						alert('<%- global.translator('storage.unavailable') %>');
						return;
					}

					var xml = window.localStorage.getItem('blocklyxml');
					if(!xml){
						alert('<%- global.translator('build.import.nothing') %>');
						return;
					}

					Blockly.Xml.domToWorkspace(Blockly.Xml.textToDom(xml), workspace);
				}

				function testBot(){
					if(test[type.val()] === undefined){
						alert('<%- global.translator('build.editor.test.no') %>');
						return;
					}

					test[type.val()]();
				}
			</script>
		</section>

		<% include ./footer %>
		<% include ./battle-script %>

		<div id="api-modal" class="modal bottom-sheet">
			<div class="modal-content">
				<h3 id="api-modal-header"></h3>
				<p id="api-modal-content"></p>
			</div>
		</div>
	</body>
</html>
